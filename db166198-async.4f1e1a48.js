(("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd=("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd||[]).push([["db166198"],{db166198:function(a,e,d){"use strict";d.d(e,"__esModule",{value:!0}),d.d(e,"texts",{enumerable:!0,get:function(){return o;}}),d("b1318295");let o=[{value:"A simple popup menu to provide extra information or operations.",paraId:0,tocIndex:0},{value:"Comparing with ",paraId:1,tocIndex:0},{value:"Tooltip",paraId:1,tocIndex:0},{value:", besides information ",paraId:1,tocIndex:0},{value:"Popover",paraId:1,tocIndex:0},{value:" card can also provide action elements like links and buttons.",paraId:1,tocIndex:0},{value:"Common props ref\uFF1A",paraId:2,tocIndex:13},{value:"Common props",paraId:3,tocIndex:13},{value:"Param",paraId:4,tocIndex:13},{value:"Description",paraId:4,tocIndex:13},{value:"Type",paraId:4,tocIndex:13},{value:"Default value",paraId:4,tocIndex:13},{value:"Version",paraId:4,tocIndex:13},{value:"content",paraId:4,tocIndex:13},{value:"Content of the card",paraId:4,tocIndex:13},{value:"ReactNode | () => ReactNode",paraId:4,tocIndex:13},{value:"-",paraId:4,tocIndex:13},{value:"title",paraId:4,tocIndex:13},{value:"Title of the card",paraId:4,tocIndex:13},{value:"ReactNode | () => ReactNode",paraId:4,tocIndex:13},{value:"-",paraId:4,tocIndex:13},{value:"Property",paraId:5},{value:"Description",paraId:5},{value:"Type",paraId:5},{value:"Default",paraId:5},{value:"Version",paraId:5},{value:"align",paraId:5},{value:"Please refer to the settings ",paraId:5},{value:"dom-align",paraId:5},{value:"object",paraId:5},{value:"-",paraId:5},{value:"arrow",paraId:5},{value:"Change arrow's visible state and change whether the arrow is pointed at the center of target.",paraId:5},{value:"boolean | { pointAtCenter: boolean }",paraId:5},{value:"true",paraId:5},{value:"5.2.0",paraId:5},{value:"autoAdjustOverflow",paraId:5},{value:"Whether to adjust popup placement automatically when popup is off screen",paraId:5},{value:"boolean",paraId:5},{value:"true",paraId:5},{value:"color",paraId:5},{value:"The background color",paraId:5},{value:"string",paraId:5},{value:"-",paraId:5},{value:"4.3.0",paraId:5},{value:"defaultOpen",paraId:5},{value:"Whether the floating tooltip card is open by default",paraId:5},{value:"boolean",paraId:5},{value:"false",paraId:5},{value:"4.23.0",paraId:5},{value:"destroyTooltipOnHide",paraId:5},{value:"Whether destroy dom when close",paraId:5},{value:"boolean",paraId:5},{value:"false",paraId:5},{value:"destroyOnHidden",paraId:5},{value:"Whether destroy dom when close",paraId:5},{value:"boolean",paraId:5},{value:"false",paraId:5},{value:"5.25.0",paraId:5},{value:"fresh",paraId:5},{value:"Tooltip will cache content when it is closed by default. Setting this property will always keep updating",paraId:5},{value:"boolean",paraId:5},{value:"false",paraId:5},{value:"5.10.0",paraId:5},{value:"getPopupContainer",paraId:5},{value:"The DOM container of the tip, the default behavior is to create a ",paraId:5},{value:"div",paraId:5},{value:" element in ",paraId:5},{value:"body",paraId:5},{value:"(triggerNode: HTMLElement) => HTMLElement",paraId:5},{value:"() => document.body",paraId:5},{value:"mouseEnterDelay",paraId:5},{value:"Delay in seconds, before tooltip is shown on mouse enter",paraId:5},{value:"number",paraId:5},{value:"0.1",paraId:5},{value:"mouseLeaveDelay",paraId:5},{value:"Delay in seconds, before tooltip is hidden on mouse leave",paraId:5},{value:"number",paraId:5},{value:"0.1",paraId:5},{value:"overlayClassName",paraId:5},{value:"Class name of the tooltip card, please use ",paraId:5},{value:"classNames={{ root: '' }}",paraId:5},{value:" instead",paraId:5},{value:"string",paraId:5},{value:"-",paraId:5},{value:"overlayStyle",paraId:5},{value:"Style of the tooltip card, please use ",paraId:5},{value:"styles={{ root: {} }}",paraId:5},{value:"React.CSSProperties",paraId:5},{value:"-",paraId:5},{value:"overlayInnerStyle",paraId:5},{value:"Style of the tooltip inner content, please use ",paraId:5},{value:"styles={{ body: {} }}",paraId:5},{value:"React.CSSProperties",paraId:5},{value:"-",paraId:5},{value:"placement",paraId:5},{value:"The position of the tooltip relative to the target, which can be one of ",paraId:5},{value:"top",paraId:5},{value:" ",paraId:5},{value:"left",paraId:5},{value:" ",paraId:5},{value:"right",paraId:5},{value:" ",paraId:5},{value:"bottom",paraId:5},{value:" ",paraId:5},{value:"topLeft",paraId:5},{value:" ",paraId:5},{value:"topRight",paraId:5},{value:" ",paraId:5},{value:"bottomLeft",paraId:5},{value:" ",paraId:5},{value:"bottomRight",paraId:5},{value:" ",paraId:5},{value:"leftTop",paraId:5},{value:" ",paraId:5},{value:"leftBottom",paraId:5},{value:" ",paraId:5},{value:"rightTop",paraId:5},{value:" ",paraId:5},{value:"rightBottom",paraId:5},{value:"string",paraId:5},{value:"top",paraId:5},{value:"trigger",paraId:5},{value:"Tooltip trigger mode. Could be multiple by passing an array",paraId:5},{value:"hover",paraId:5},{value:" | ",paraId:5},{value:"focus",paraId:5},{value:" | ",paraId:5},{value:"click",paraId:5},{value:" | ",paraId:5},{value:"contextMenu",paraId:5},{value:" | Array<string>",paraId:5},{value:"hover",paraId:5},{value:"open",paraId:5},{value:"Whether the floating tooltip card is open or not. Use ",paraId:5},{value:"visible",paraId:5},{value:" under 4.23.0 (",paraId:5},{value:"why?",paraId:6},{value:")",paraId:5},{value:"boolean",paraId:5},{value:"false",paraId:5},{value:"4.23.0",paraId:5},{value:"zIndex",paraId:5},{value:"Config ",paraId:5},{value:"z-index",paraId:5},{value:" of Tooltip",paraId:5},{value:"number",paraId:5},{value:"-",paraId:5},{value:"onOpenChange",paraId:5},{value:"Callback executed when visibility of the tooltip card is changed",paraId:5},{value:"(open: boolean) => void",paraId:5},{value:"-",paraId:5},{value:"4.23.0",paraId:5},{value:"Please ensure that the child node of ",paraId:7,tocIndex:14},{value:"Popover",paraId:7,tocIndex:14},{value:" accepts ",paraId:7,tocIndex:14},{value:"onMouseEnter",paraId:7,tocIndex:14},{value:", ",paraId:7,tocIndex:14},{value:"onMouseLeave",paraId:7,tocIndex:14},{value:", ",paraId:7,tocIndex:14},{value:"onFocus",paraId:7,tocIndex:14},{value:", ",paraId:7,tocIndex:14},{value:"onClick",paraId:7,tocIndex:14},{value:" events.",paraId:7,tocIndex:14},{value:"findDOMNode is deprecated",paraId:8},{value:"This is due to the implementation of ",paraId:9,tocIndex:18},{value:"rc-trigger",paraId:9,tocIndex:18},{value:". ",paraId:9,tocIndex:18},{value:"rc-trigger",paraId:9,tocIndex:18},{value:" forces children to accept ref, otherwise it will fall back to findDOMNode, so children need to be native html tags. If not, you need to use ",paraId:9,tocIndex:18},{value:"React.forwardRef",paraId:9,tocIndex:18},{value:" transparently passes ",paraId:9,tocIndex:18},{value:"ref",paraId:9,tocIndex:18},{value:" to native html tags.",paraId:9,tocIndex:18},{value:"findDOMNode is deprecated",paraId:10,tocIndex:18},{value:" reproduce: ",paraId:10,tocIndex:18},{value:"https://codesandbox.io/p/sandbox/finddomnode-c5hy96",paraId:10,tocIndex:18},{value:"Using ",paraId:10,tocIndex:18},{value:"forwardRef",paraId:10,tocIndex:18},{value:" to fix: ",paraId:10,tocIndex:18},{value:"https://codesandbox.io/p/sandbox/no-finddomnode-warning-forked-gdxczs",paraId:10,tocIndex:18},{value:"Similar issues: ",paraId:11,tocIndex:19},{value:"#15909",paraId:11,tocIndex:19},{value:", ",paraId:11,tocIndex:19},{value:"#12812",paraId:11,tocIndex:19},{value:".",paraId:11,tocIndex:19},{value:"Please ensure that the child node to accept ",paraId:12,tocIndex:19},{value:"onMouseEnter",paraId:12,tocIndex:19},{value:", ",paraId:12,tocIndex:19},{value:"onMouseLeave",paraId:12,tocIndex:19},{value:", ",paraId:12,tocIndex:19},{value:"onPointerEnter",paraId:12,tocIndex:19},{value:", ",paraId:12,tocIndex:19},{value:"onPointerLeave",paraId:12,tocIndex:19},{value:", ",paraId:12,tocIndex:19},{value:"onFocus",paraId:12,tocIndex:19},{value:", and ",paraId:12,tocIndex:19},{value:"onClick",paraId:12,tocIndex:19},{value:" events, If you create your own component and do not explicitly add these mouse and pointer events as props, the tooltip will never appear. ",paraId:12,tocIndex:19},{value:"See Example",paraId:12,tocIndex:19},{value:".",paraId:12,tocIndex:19},{value:"It will follow ",paraId:13,tocIndex:20},{value:"placement",paraId:13,tocIndex:20},{value:" config when screen has enough space. And flip when space is not enough (Such as ",paraId:13,tocIndex:20},{value:"top",paraId:13,tocIndex:20},{value:" to ",paraId:13,tocIndex:20},{value:"bottom",paraId:13,tocIndex:20},{value:" or ",paraId:13,tocIndex:20},{value:"topLeft",paraId:13,tocIndex:20},{value:" to ",paraId:13,tocIndex:20},{value:"bottomLeft",paraId:13,tocIndex:20},{value:"). Single direction such as ",paraId:13,tocIndex:20},{value:"top",paraId:13,tocIndex:20},{value:" ",paraId:13,tocIndex:20},{value:"bottom",paraId:13,tocIndex:20},{value:" ",paraId:13,tocIndex:20},{value:"left",paraId:13,tocIndex:20},{value:" ",paraId:13,tocIndex:20},{value:"right",paraId:13,tocIndex:20},{value:" will auto shift on the view:",paraId:13,tocIndex:20},{value:"When ",paraId:14,tocIndex:20},{value:"placement",paraId:14,tocIndex:20},{value:" is set to edge align such as ",paraId:14,tocIndex:20},{value:"topLeft",paraId:14,tocIndex:20},{value:" ",paraId:14,tocIndex:20},{value:"bottomRight",paraId:14,tocIndex:20},{value:", it will only do flip but not do shift.",paraId:14,tocIndex:20},{value:"For more questions, please refer to ",paraId:15,tocIndex:20},{value:"Tooltip FAQ",paraId:16,tocIndex:20},{value:".",paraId:15,tocIndex:20}];}}]);