(("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd=("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd||[]).push([["73ae3d24"],{"73ae3d24":function(e,a,d){"use strict";d.d(a,"__esModule",{value:!0}),d.d(a,"texts",{enumerable:!0,get:function(){return n;}}),d("8b864599");let n=[{value:"When you need an input box instead of a selector.",paraId:0,tocIndex:0},{value:"When you need input suggestions or helping text.",paraId:0,tocIndex:0},{value:"The differences with Select are:",paraId:1,tocIndex:0},{value:"AutoComplete is an input box with text hints, and users can type freely. The keyword is aiding ",paraId:2,tocIndex:0},{value:"input",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"Select is selecting among given choices. The keyword is ",paraId:2,tocIndex:0},{value:"select",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"Common props ref\uFF1A",paraId:3,tocIndex:14},{value:"Common props",paraId:4,tocIndex:14},{value:"Property",paraId:5,tocIndex:14},{value:"Description",paraId:5,tocIndex:14},{value:"Type",paraId:5,tocIndex:14},{value:"Default",paraId:5,tocIndex:14},{value:"Version",paraId:5,tocIndex:14},{value:"allowClear",paraId:5,tocIndex:14},{value:"Show clear button",paraId:5,tocIndex:14},{value:"boolean | { clearIcon?: ReactNode }",paraId:5,tocIndex:14},{value:"false",paraId:5,tocIndex:14},{value:"5.8.0: Support Object type",paraId:5,tocIndex:14},{value:"autoFocus",paraId:5,tocIndex:14},{value:"If get focus when component mounted",paraId:5,tocIndex:14},{value:"boolean",paraId:5,tocIndex:14},{value:"false",paraId:5,tocIndex:14},{value:"backfill",paraId:5,tocIndex:14},{value:"If backfill selected item the input when using keyboard",paraId:5,tocIndex:14},{value:"boolean",paraId:5,tocIndex:14},{value:"false",paraId:5,tocIndex:14},{value:"children",paraId:5,tocIndex:14},{value:"Customize input element",paraId:5,tocIndex:14},{value:"HTMLInputElement | HTMLTextAreaElement | React.ReactElement<InputProps>",paraId:5,tocIndex:14},{value:"<Input />",paraId:5,tocIndex:14},{value:"classNames",paraId:5,tocIndex:14},{value:"Semantic DOM class",paraId:5,tocIndex:14},{value:"Record<SemanticDOM, string>",paraId:6,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"5.25.0",paraId:5,tocIndex:14},{value:"defaultActiveFirstOption",paraId:5,tocIndex:14},{value:"Whether active first option by default",paraId:5,tocIndex:14},{value:"boolean",paraId:5,tocIndex:14},{value:"true",paraId:5,tocIndex:14},{value:"defaultOpen",paraId:5,tocIndex:14},{value:"Initial open state of dropdown",paraId:5,tocIndex:14},{value:"boolean",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"defaultValue",paraId:5,tocIndex:14},{value:"Initial selected option",paraId:5,tocIndex:14},{value:"string",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"disabled",paraId:5,tocIndex:14},{value:"Whether disabled select",paraId:5,tocIndex:14},{value:"boolean",paraId:5,tocIndex:14},{value:"false",paraId:5,tocIndex:14},{value:"dropdownRender",paraId:5,tocIndex:14},{value:"Customize dropdown content, use ",paraId:5,tocIndex:14},{value:"popupRender",paraId:5,tocIndex:14},{value:" instead",paraId:5,tocIndex:14},{value:"(originNode: ReactNode) => ReactNode",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"4.24.0",paraId:5,tocIndex:14},{value:"popupRender",paraId:5,tocIndex:14},{value:"Customize dropdown content",paraId:5,tocIndex:14},{value:"(originNode: ReactNode) => ReactNode",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"dropdownStyle",paraId:5,tocIndex:14},{value:"The style of dropdown menu, use ",paraId:5,tocIndex:14},{value:"styles.popup.root",paraId:5,tocIndex:14},{value:" instead",paraId:5,tocIndex:14},{value:"CSSProperties",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"popupClassName",paraId:5,tocIndex:14},{value:"The className of dropdown menu, use ",paraId:5,tocIndex:14},{value:"classNames.popup.root",paraId:5,tocIndex:14},{value:" instead",paraId:5,tocIndex:14},{value:"string",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"4.23.0",paraId:5,tocIndex:14},{value:"popupMatchSelectWidth",paraId:5,tocIndex:14},{value:"Determine whether the dropdown menu and the select input are the same width. Default set ",paraId:5,tocIndex:14},{value:"min-width",paraId:5,tocIndex:14},{value:" same as input. Will ignore when value less than select width. ",paraId:5,tocIndex:14},{value:"false",paraId:5,tocIndex:14},{value:" will disable virtual scroll",paraId:5,tocIndex:14},{value:"boolean | number",paraId:5,tocIndex:14},{value:"true",paraId:5,tocIndex:14},{value:"filterOption",paraId:5,tocIndex:14},{value:"If true, filter options by input, if function, filter options against it. The function will receive two arguments, ",paraId:5,tocIndex:14},{value:"inputValue",paraId:5,tocIndex:14},{value:" and ",paraId:5,tocIndex:14},{value:"option",paraId:5,tocIndex:14},{value:", if the function returns true, the option will be included in the filtered set; Otherwise, it will be excluded",paraId:5,tocIndex:14},{value:"boolean | function(inputValue, option)",paraId:5,tocIndex:14},{value:"true",paraId:5,tocIndex:14},{value:"getPopupContainer",paraId:5,tocIndex:14},{value:"Parent node of the dropdown. Default to body, if you encountered positioning problems during scroll, try changing to the scrollable area and position relative to it. ",paraId:5,tocIndex:14},{value:"Example",paraId:5,tocIndex:14},{value:"function(triggerNode)",paraId:5,tocIndex:14},{value:"() => document.body",paraId:5,tocIndex:14},{value:"notFoundContent",paraId:5,tocIndex:14},{value:"Specify content to show when no result matches",paraId:5,tocIndex:14},{value:"ReactNode",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"open",paraId:5,tocIndex:14},{value:"Controlled open state of dropdown",paraId:5,tocIndex:14},{value:"boolean",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"options",paraId:5,tocIndex:14},{value:"Select options. Will get better perf than jsx definition",paraId:5,tocIndex:14},{value:"{ label, value }[]",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"placeholder",paraId:5,tocIndex:14},{value:"The placeholder of input",paraId:5,tocIndex:14},{value:"string",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"status",paraId:5,tocIndex:14},{value:"Set validation status",paraId:5,tocIndex:14},{value:"'error' | 'warning'",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"4.19.0",paraId:5,tocIndex:14},{value:"size",paraId:5,tocIndex:14},{value:"The size of the input box",paraId:5,tocIndex:14},{value:"large",paraId:5,tocIndex:14},{value:" | ",paraId:5,tocIndex:14},{value:"middle",paraId:5,tocIndex:14},{value:" | ",paraId:5,tocIndex:14},{value:"small",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"value",paraId:5,tocIndex:14},{value:"Selected option",paraId:5,tocIndex:14},{value:"string",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"styles",paraId:5,tocIndex:14},{value:"Semantic DOM style",paraId:5,tocIndex:14},{value:"Record<SemanticDOM, CSSProperties>",paraId:7,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"5.25.0",paraId:5,tocIndex:14},{value:"variant",paraId:5,tocIndex:14},{value:"Variants of input",paraId:5,tocIndex:14},{value:"outlined",paraId:5,tocIndex:14},{value:" | ",paraId:5,tocIndex:14},{value:"borderless",paraId:5,tocIndex:14},{value:" | ",paraId:5,tocIndex:14},{value:"filled",paraId:5,tocIndex:14},{value:" | ",paraId:5,tocIndex:14},{value:"underlined",paraId:5,tocIndex:14},{value:"outlined",paraId:5,tocIndex:14},{value:"5.13.0",paraId:5,tocIndex:14},{value:"virtual",paraId:5,tocIndex:14},{value:"Disable virtual scroll when set to false",paraId:5,tocIndex:14},{value:"boolean",paraId:5,tocIndex:14},{value:"true",paraId:5,tocIndex:14},{value:"4.1.0",paraId:5,tocIndex:14},{value:"onBlur",paraId:5,tocIndex:14},{value:"Called when leaving the component",paraId:5,tocIndex:14},{value:"function()",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"onChange",paraId:5,tocIndex:14},{value:"Called when selecting an option or changing an input value",paraId:5,tocIndex:14},{value:"function(value)",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"onDropdownVisibleChange",paraId:5,tocIndex:14},{value:"Called when dropdown open, use ",paraId:5,tocIndex:14},{value:"onOpenChange",paraId:5,tocIndex:14},{value:" instead",paraId:5,tocIndex:14},{value:"(open: boolean) => void",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"onOpenChange",paraId:5,tocIndex:14},{value:"Called when dropdown open",paraId:5,tocIndex:14},{value:"(open: boolean) => void",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"onFocus",paraId:5,tocIndex:14},{value:"Called when entering the component",paraId:5,tocIndex:14},{value:"function()",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"onSearch",paraId:5,tocIndex:14},{value:"Called when searching items",paraId:5,tocIndex:14},{value:"function(value)",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"onSelect",paraId:5,tocIndex:14},{value:"Called when a option is selected. param is option's value and option instance",paraId:5,tocIndex:14},{value:"function(value, option)",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"onClear",paraId:5,tocIndex:14},{value:"Called when clear",paraId:5,tocIndex:14},{value:"function",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"4.6.0",paraId:5,tocIndex:14},{value:"onInputKeyDown",paraId:5,tocIndex:14},{value:"Called when key pressed",paraId:5,tocIndex:14},{value:"(event: KeyboardEvent) => void",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"onPopupScroll",paraId:5,tocIndex:14},{value:"Called when dropdown scrolls",paraId:5,tocIndex:14},{value:"(event: UIEvent) => void",paraId:5,tocIndex:14},{value:"-",paraId:5,tocIndex:14},{value:"Name",paraId:8,tocIndex:15},{value:"Description",paraId:8,tocIndex:15},{value:"Version",paraId:8,tocIndex:15},{value:"blur()",paraId:8,tocIndex:15},{value:"Remove focus",paraId:8,tocIndex:15},{value:"focus()",paraId:8,tocIndex:15},{value:"Get focus",paraId:8,tocIndex:15},{value:"Please use ",paraId:9,tocIndex:19},{value:"onChange",paraId:9,tocIndex:19},{value:" to manage control state. ",paraId:9,tocIndex:19},{value:"onSearch",paraId:9,tocIndex:19},{value:" is used for searching input which is not the same as ",paraId:9,tocIndex:19},{value:"onChange",paraId:9,tocIndex:19},{value:". Besides, clicking on the option will not trigger the ",paraId:9,tocIndex:19},{value:"onSearch",paraId:9,tocIndex:19},{value:" event.",paraId:9,tocIndex:19},{value:"Related issue: ",paraId:10,tocIndex:19},{value:"#18230",paraId:10,tocIndex:19},{value:" ",paraId:10,tocIndex:19},{value:"#17916",paraId:10,tocIndex:19},{value:"The AutoComplete component is essentially an extension of the Input form element. When the ",paraId:11,tocIndex:20},{value:"options",paraId:11,tocIndex:20},{value:" property is empty, displaying empty text could mislead the user into believing the component is not operational, when in fact they are still able to input text. To avoid confusion, the ",paraId:11,tocIndex:20},{value:"open",paraId:11,tocIndex:20},{value:" property will not display the drop-down menu when set to ",paraId:11,tocIndex:20},{value:"true",paraId:11,tocIndex:20},{value:" and in combination with an empty ",paraId:11,tocIndex:20},{value:"options",paraId:11,tocIndex:20},{value:" property. The ",paraId:11,tocIndex:20},{value:"open",paraId:11,tocIndex:20},{value:" property must be used in conjunction with the ",paraId:11,tocIndex:20},{value:"options",paraId:11,tocIndex:20},{value:" property.",paraId:11,tocIndex:20}];}}]);