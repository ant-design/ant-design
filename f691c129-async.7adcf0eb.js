(("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd=("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd||[]).push([["f691c129"],{f691c129:function(e,n,a){"use strict";a.d(n,"__esModule",{value:!0}),a.d(n,"texts",{enumerable:!0,get:function(){return o;}}),a("02b24fbb");let o=[{value:"Ant Design allows you to customize our design tokens to satisfy UI diversity from business or brand requirements, including primary color, border radius, border color, etc.",paraId:0},{value:"In version 5.0, we provide a new way to customize themes. Different from the less and CSS variables of the 4.x version, with CSS-in-JS, the ability of theming has also been enhanced, including but not limited to:",paraId:1},{value:"Switching theme dynamically\uFF1B",paraId:2},{value:"Multiple themes\uFF1B",paraId:2},{value:"Customizing theme variables for some components\uFF1B",paraId:2},{value:"...",paraId:2},{value:"In version 5.0 we call the smallest element that affects the theme ",paraId:3,tocIndex:0},{value:"Design Token",paraId:3,tocIndex:0},{value:". By modifying the Design Token, we can present various themes or components. You can pass ",paraId:3,tocIndex:0},{value:"theme",paraId:3,tocIndex:0},{value:" to ",paraId:3,tocIndex:0},{value:"ConfigProvider",paraId:3,tocIndex:0},{value:" to customize theme. After migrate to V5, theme of V5 will be applied by default.",paraId:3,tocIndex:0},{value:"ConfigProvider",paraId:4},{value:" will not take effect on static methods such as ",paraId:4},{value:"message.xxx",paraId:4},{value:", ",paraId:4},{value:"Modal.xxx",paraId:4},{value:", ",paraId:4},{value:"notification.xxx",paraId:4},{value:", because in these methods, antd will dynamically create new ones through ",paraId:4},{value:"ReactDOM.render",paraId:4},{value:" React entities. Its context is not the same as the context of the current code, so context information cannot be obtained.",paraId:4},{value:"When you need context information (such as the content configured by ConfigProvider), you can use the ",paraId:5},{value:"Modal.useModal",paraId:5},{value:" method to return the modal entity and the contextHolder node. Just insert it where you need to get the context, or you can use ",paraId:5},{value:"App Component",paraId:6},{value:" to simplify the problem of usingModal and other methods that need to manually implant the contextHolder.",paraId:5},{value:"By modifying ",paraId:7,tocIndex:1},{value:"token",paraId:7,tocIndex:1},{value:" property of ",paraId:7,tocIndex:1},{value:"theme",paraId:7,tocIndex:1},{value:", we can modify Design Token globally. Some tokens will affect other tokens. We call these tokens Seed Token.",paraId:7,tocIndex:1},{value:"const sandpackConfig = {\n  autorun: true,\n};\n\nimport { Button, ConfigProvider, Space } from 'antd';\nimport React from 'react';\n\nconst App: React.FC = () => (\n  <ConfigProvider\n    theme={{\n      token: {\n        // Seed Token\n        colorPrimary: '#00b96b',\n        borderRadius: 2,\n\n        // Alias Token\n        colorBgContainer: '#f6ffed',\n      },\n    }}\n  >\n    <Space>\n      <Button type=\"primary\">Primary</Button>\n      <Button>Default</Button>\n    </Space>\n  </ConfigProvider>\n);\n\nexport default App;\n",paraId:8,tocIndex:1},{value:"Themes with different styles can be quickly generated by modifying ",paraId:9,tocIndex:2},{value:"algorithm",paraId:9,tocIndex:2},{value:". Ant Design 5.0 provides three sets of preset algorithms by default:",paraId:9,tocIndex:2},{value:"default algorithm ",paraId:10,tocIndex:2},{value:"theme.defaultAlgorithm",paraId:10,tocIndex:2},{value:"dark algorithm ",paraId:10,tocIndex:2},{value:"theme.darkAlgorithm",paraId:10,tocIndex:2},{value:"compact algorithm ",paraId:10,tocIndex:2},{value:"theme.compactAlgorithm",paraId:10,tocIndex:2},{value:"You can switch algorithms by modifying the ",paraId:11,tocIndex:2},{value:"algorithm",paraId:11,tocIndex:2},{value:" property of ",paraId:11,tocIndex:2},{value:"theme",paraId:11,tocIndex:2},{value:" in ConfigProvider.",paraId:11,tocIndex:2},{value:"const sandpackConfig = {\n  dark: true,\n};\n\nimport React from 'react';\nimport { Button, ConfigProvider, Input, Space, theme } from 'antd';\n\nconst App: React.FC = () => (\n  <ConfigProvider\n    theme={{\n      // 1. Use dark algorithm\n      algorithm: theme.darkAlgorithm,\n\n      // 2. Combine dark algorithm and compact algorithm\n      // algorithm: [theme.darkAlgorithm, theme.compactAlgorithm],\n    }}\n  >\n    <Space>\n      <Input placeholder=\"Please Input\" />\n      <Button type=\"primary\">Submit</Button>\n    </Space>\n  </ConfigProvider>\n);\n\nexport default App;\n",paraId:12,tocIndex:2},{value:"In addition to Design Token, each component will also have its own Component Token to achieve style customization capabilities for components, and different components will not affect each other. Similarly, other Design Token of components can also be overridden in this way.",paraId:13,tocIndex:3},{value:"By default, all component tokens can only override global token and will not be derived based on Seed Token.",paraId:14},{value:"In version ",paraId:15},{value:">= 5.8.0",paraId:15},{value:", component tokens support the ",paraId:15},{value:"algorithm",paraId:15},{value:" property, which can be used to enable algorithm or pass in other algorithms.",paraId:15},{value:"import React from 'react';\nimport { ConfigProvider, Button, Space, Input, Divider } from 'antd';\n\nconst App: React.FC = () => (\n  <>\n    <ConfigProvider\n      theme={{\n        components: {\n          Button: {\n            colorPrimary: '#00b96b',\n            algorithm: true, // Enable algorithm\n          },\n          Input: {\n            colorPrimary: '#eb2f96',\n            algorithm: true, // Enable algorithm\n          }\n        },\n      }}\n    >\n      <Space>\n        <div style={{ fontSize: 14 }}>Enable algorithm: </div>\n        <Input placeholder=\"Please Input\" />\n        <Button type=\"primary\">Submit</Button>\n      </Space>\n    </ConfigProvider>\n    <Divider />\n    <ConfigProvider\n      theme={{\n        components: {\n          Button: {\n            colorPrimary: '#00b96b',\n          },\n          Input: {\n            colorPrimary: '#eb2f96',\n          }\n        },\n      }}\n    >\n      <Space>\n        <div style={{ fontSize: 14 }}>Disable algorithm: </div>\n        <Input placeholder=\"Please Input\" />\n        <Button type=\"primary\">Submit</Button>\n      </Space>\n    </ConfigProvider>\n  </>\n);\n\nexport default App;\n",paraId:16},{value:"antd has built-in interaction animations to make enterprise-level pages more detailed. In some extreme scenarios, it may affect the performance of page interaction. If you need to turn off the animation, try setting ",paraId:17,tocIndex:4},{value:"motion",paraId:17,tocIndex:4},{value:" of ",paraId:17,tocIndex:4},{value:"token",paraId:17,tocIndex:4},{value:" to ",paraId:17,tocIndex:4},{value:"false",paraId:17,tocIndex:4},{value:":",paraId:17,tocIndex:4},{value:"import React from 'react';\nimport { Checkbox, Col, ConfigProvider, Flex, Radio, Row, Switch } from 'antd';\n\nconst App: React.FC = () => {\n  const [checked, setChecked] = React.useState<boolean>(false);\n  const timerRef = React.useRef<ReturnType<typeof setInterval>>();\n  React.useEffect(() => {\n    timerRef.current = setInterval(() => {\n      setChecked((prev) => !prev);\n    }, 500);\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n\n  const nodes = (\n    <Flex gap=\"small\">\n      <Checkbox checked={checked}>Checkbox</Checkbox>\n      <Radio checked={checked}>Radio</Radio>\n      <Switch checked={checked} />\n    </Flex>\n  );\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>{nodes}</Col>\n      <Col span={24}>\n        <ConfigProvider theme={{ token: { motion: false } }}>{nodes}</ConfigProvider>\n      </Col>\n    </Row>\n  );\n};\n\nexport default App;\n",paraId:18,tocIndex:4},{value:"In v5, dynamically switching themes is very simple for users, you can dynamically switch themes at any time through the ",paraId:19,tocIndex:6},{value:"theme",paraId:19,tocIndex:6},{value:" property of ",paraId:19,tocIndex:6},{value:"ConfigProvider",paraId:19,tocIndex:6},{value:" without any additional configuration.",paraId:19,tocIndex:6},{value:"import { Button, ConfigProvider, Space, Input, ColorPicker, Divider } from 'antd';\nimport React from 'react';\n\nconst App: React.FC = () => {\n  const [primary, setPrimary] = React.useState('#1677ff');\n\n  return (\n    <>\n      <ColorPicker showText value={primary} onChange={(color) => setPrimary(color.toHexString())} />\n      <Divider />\n      <ConfigProvider\n        theme={{\n          token: {\n            colorPrimary: primary,\n          },\n        }}\n      >\n        <Space>\n          <Input placeholder=\"Please Input\" />\n          <Button type=\"primary\">Submit</Button>\n        </Space>\n      </ConfigProvider>\n    </>\n  );\n}\n\nexport default App;\n",paraId:20,tocIndex:6},{value:"By nesting ",paraId:21,tocIndex:7},{value:"ConfigProvider",paraId:21,tocIndex:7},{value:" you can apply local theme to some parts of your page. Design Tokens that have not been changed in the child theme will inherit the parent theme.",paraId:21,tocIndex:7},{value:"import React from 'react';\nimport { Button, ConfigProvider, Space } from 'antd';\n\nconst App: React.FC = () => (\n  <ConfigProvider\n    theme={{\n      token: {\n        colorPrimary: '#1677ff',\n      },\n    }}\n  >\n    <Space>\n      <Button type=\"primary\">Theme 1</Button>\n      <ConfigProvider\n        theme={{\n          token: {\n            colorPrimary: '#00b96b',\n          },\n        }}\n      >\n        <Button type=\"primary\">Theme 2</Button>\n      </ConfigProvider>\n    </Space>\n  </ConfigProvider>\n);\n\nexport default App;\n",paraId:22,tocIndex:7},{value:"If you want to consume the Design Token under the current theme, we provide ",paraId:23,tocIndex:8},{value:"useToken",paraId:23,tocIndex:8},{value:" hook to get Design Token.",paraId:23,tocIndex:8},{value:"import React from 'react';\nimport { Button, theme } from 'antd';\n\nconst { useToken } = theme;\n\nconst App: React.FC = () => {\n  const { token } = useToken();\n\n  return (\n    <div\n      style={{\n        backgroundColor: token.colorPrimaryBg,\n        padding: token.padding,\n        borderRadius: token.borderRadius,\n        color: token.colorPrimaryText,\n        fontSize: token.fontSize,\n      }}\n    >\n      Consume Design Token\n    </div>\n  );\n};\n\nexport default App;\n",paraId:24,tocIndex:8},{value:"When you need token out of React life cycle, you can use static function to get them:",paraId:25,tocIndex:9},{value:"import { theme } from 'antd';\n\nconst { getDesignToken } = theme;\n\nconst globalToken = getDesignToken();\n",paraId:26,tocIndex:9},{value:"Same as ConfigProvider, ",paraId:27,tocIndex:9},{value:"getDesignToken",paraId:27,tocIndex:9},{value:" could also accept a config object as ",paraId:27,tocIndex:9},{value:"theme",paraId:27,tocIndex:9},{value:":",paraId:27,tocIndex:9},{value:"import type { ThemeConfig } from 'antd';\nimport { theme } from 'antd';\nimport { createRoot } from 'react-dom/client';\n\nconst { getDesignToken, useToken } = theme;\n\nconst config: ThemeConfig = {\n  token: {\n    colorPrimary: '#1890ff',\n  },\n};\n\n// By static function\nconst globalToken = getDesignToken(config);\n\n// By hook\nconst App = () => {\n  const { token } = useToken();\n  return null;\n};\n\n// Example for rendering\ncreateRoot(document.getElementById('#app')).render(\n  <ConfigProvider theme={config}>\n    <App />\n  </ConfigProvider>,\n);\n",paraId:28,tocIndex:9},{value:"If you want to use in preprocess style framework like less, use less-loader for injection:",paraId:29,tocIndex:9},{value:'{\n  loader: "less-loader",\n  options: {\n    lessOptions: {\n      modifyVars: mapToken,\n    },\n  },\n}\n',paraId:30,tocIndex:9},{value:"Compatible package provide convert function to transform to v4 less variable. Read ",paraId:31,tocIndex:9},{value:"this",paraId:32,tocIndex:9},{value:" for detail.",paraId:31,tocIndex:9},{value:"We provide tools to help users debug themes: ",paraId:33,tocIndex:10},{value:"Theme Editor",paraId:34,tocIndex:10},{value:"You can use this tool to freely modify Design Token to meet your theme expectations.",paraId:35,tocIndex:10},{value:"In Design Token, we provide a three-layer structure that is more suitable for the design, and disassemble the Design Token into three parts: Seed Token, Map Token and Alias Token. These three groups of Tokens are not simple groupings, but a three-layer derivation relationship. Map Tokens are derived from Seed Tokens, and Alias Tokens are derived from Map Tokens. In most cases, using Seed Tokens is sufficient for custom themes. But if you need a higher degree of theme customization, you need to understand the life cycle of Design Token in antd.",paraId:36,tocIndex:11},{value:"Seed Token means the origin of all design intent. For example, we can change the theme color by changing ",paraId:37,tocIndex:13},{value:"colorPrimary",paraId:37,tocIndex:13},{value:", and the algorithm inside antd will automatically calculate and apply a series of corresponding colors according to the Seed Token:",paraId:37,tocIndex:13},{value:"const theme = {\n  token: {\n    colorPrimary: '#1890ff',\n  },\n};\n",paraId:38,tocIndex:13},{value:"Map Token is a gradient variable derived from Seed. It is recommended to implement custom Map Token through ",paraId:39,tocIndex:14},{value:"theme.algorithm",paraId:39,tocIndex:14},{value:", which can ensure the gradient relationship between Map Tokens. It can also be overridden by ",paraId:39,tocIndex:14},{value:"theme.token",paraId:39,tocIndex:14},{value:" to modify the value of some map tokens individually.",paraId:39,tocIndex:14},{value:"const theme = {\n  token: {\n    colorPrimaryBg: '#e6f7ff',\n  },\n};\n",paraId:40,tocIndex:14},{value:"Alias Token is used to control the style of some common components in batches, which is basically a Map Token alias, or a specially processed Map Token.",paraId:41,tocIndex:15},{value:"const theme = {\n  token: {\n    colorLink: '#1890ff',\n  },\n};\n",paraId:42,tocIndex:15},{value:"The basic algorithm is used to expand the Seed Token into a Map Token, such as calculating a gradient color palette from a basic color, or calculating rounded corners of various sizes from a basic rounded corner. Algorithms can be used alone or in any combination, for example, dark and compact algorithms can be combined to get a dark and compact theme.",paraId:43,tocIndex:16},{value:"import { theme } from 'antd';\n\nconst { darkAlgorithm, compactAlgorithm } = theme;\n\nconst theme = {\n  algorithm: [darkAlgorithm, compactAlgorithm],\n};\n",paraId:44,tocIndex:16},{value:"Property",paraId:45,tocIndex:18},{value:"Description",paraId:45,tocIndex:18},{value:"Type",paraId:45,tocIndex:18},{value:"Default",paraId:45,tocIndex:18},{value:"token",paraId:45,tocIndex:18},{value:"Modify Design Token",paraId:45,tocIndex:18},{value:"AliasToken",paraId:45,tocIndex:18},{value:"-",paraId:45,tocIndex:18},{value:"inherit",paraId:45,tocIndex:18},{value:"Inherit theme configured in upper ConfigProvider",paraId:45,tocIndex:18},{value:"boolean",paraId:45,tocIndex:18},{value:"true",paraId:45,tocIndex:18},{value:"algorithm",paraId:45,tocIndex:18},{value:"Modify the algorithms of theme",paraId:45,tocIndex:18},{value:"(token: SeedToken) => MapToken",paraId:45,tocIndex:18},{value:" | ",paraId:45,tocIndex:18},{value:"((token: SeedToken) => MapToken)[]",paraId:45,tocIndex:18},{value:"defaultAlgorithm",paraId:45,tocIndex:18},{value:"components",paraId:45,tocIndex:18},{value:"Modify Component Token and Alias Token applied to components",paraId:45,tocIndex:18},{value:"ComponentsConfig",paraId:45,tocIndex:18},{value:"-",paraId:45,tocIndex:18},{value:"cssVar",paraId:45,tocIndex:18},{value:"Toggle CSS Variables, refer ",paraId:45,tocIndex:18},{value:"CSS Variables",paraId:46,tocIndex:18},{value:"boolean | { prefix?: string; key?: string }",paraId:45,tocIndex:18},{value:"false",paraId:45,tocIndex:18},{value:"hashed",paraId:45,tocIndex:18},{value:"Component class Hash value, refer ",paraId:45,tocIndex:18},{value:"CSS Variables",paraId:47,tocIndex:18},{value:"boolean",paraId:45,tocIndex:18},{value:"true",paraId:45,tocIndex:18},{value:"Property",paraId:48,tocIndex:19},{value:"Description",paraId:48,tocIndex:19},{value:"Type",paraId:48,tocIndex:19},{value:"Default",paraId:48,tocIndex:19},{value:"Component",paraId:48,tocIndex:19},{value:" (Can be any antd Component name like ",paraId:48,tocIndex:19},{value:"Button",paraId:48,tocIndex:19},{value:")",paraId:48,tocIndex:19},{value:"Modify Component Token or override Component used Alias Token",paraId:48,tocIndex:19},{value:"ComponentToken & AliasToken & { algorithm: boolean | (token: SeedToken) => MapToken",paraId:48,tocIndex:19},{value:" | ",paraId:48,tocIndex:19},{value:"((token: SeedToken) => MapToken)[]}",paraId:48,tocIndex:19},{value:"-",paraId:48,tocIndex:19},{value:"algorithm",paraId:49,tocIndex:19},{value:" of component is ",paraId:49,tocIndex:19},{value:"false",paraId:49,tocIndex:19},{value:" by default, which means tokens of component will only override global token. When it is set with ",paraId:49,tocIndex:19},{value:"true",paraId:49,tocIndex:19},{value:", the algorithm will be the same as global. You can also pass algorithm or Array of algorithm, and it will override algorithm of global.",paraId:49,tocIndex:19},{value:"Inherit all SeedToken properties",paraId:50,tocIndex:21},{value:"Inherit all SeedToken and MapToken properties",paraId:51,tocIndex:22},{value:"theme",paraId:52},{value:"undefined",paraId:52},{value:"undefined",paraId:52},{value:"In ConfigProvider, we pass context through ",paraId:53,tocIndex:24},{value:"DesignTokenContext",paraId:53,tocIndex:24},{value:". When ",paraId:53,tocIndex:24},{value:"theme",paraId:53,tocIndex:24},{value:" is ",paraId:53,tocIndex:24},{value:"undefined",paraId:53,tocIndex:24},{value:", a layer of Provider will not be set, so React VirtualDOM structure changes from scratch or from existence to nothing, causing components to be re-mounted. Solution: Replace ",paraId:53,tocIndex:24},{value:"undefined",paraId:53,tocIndex:24},{value:" with an empty object ",paraId:53,tocIndex:24},{value:"{}",paraId:53,tocIndex:24},{value:".",paraId:53,tocIndex:24}];}}]);