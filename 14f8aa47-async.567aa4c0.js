(("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd=("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd||[]).push([["14f8aa47"],{"14f8aa47":function(e,t,a){"use strict";a.d(t,"__esModule",{value:!0}),a.d(t,"texts",{enumerable:!0,get:function(){return n;}}),a("243ff6bf");let n=[{value:"As we all know, antd v5 uses CSS-in-JS to support the needs of mixed and dynamic styles. On the contrary, it needs to generate styles at runtime, which will cause some performance loss. Therefore, we developed the ",paraId:0},{value:"@ant-design/cssinjs",paraId:0},{value:" library at the component library level to improve the cache efficiency through certain constraints, so as to achieve the purpose of performance optimization. But we don't stop there. We can skip the stage of generating styles at runtime through some logic.",paraId:0},{value:"If you have checked the official website of Ant Design, you will find that Ant Design's components do not dynamically insert ",paraId:1,tocIndex:0},{value:"<style />",paraId:1,tocIndex:0},{value:" to control styles, but use CSS files to control styles:",paraId:1,tocIndex:0},{value:"document.head",paraId:2,tocIndex:0},{value:" has some ",paraId:2,tocIndex:0},{value:"css",paraId:2,tocIndex:0},{value:" file references:",paraId:2,tocIndex:0},{value:"umi.[hash].css",paraId:3,tocIndex:0},{value:"style-acss.[hash].css",paraId:3,tocIndex:0},{value:"The former is the style content generated by dumi, such as Demo block, search box style, etc. The latter is the style file generated by SSR. In the ",paraId:4,tocIndex:0},{value:"custom theme",paraId:5,tocIndex:0},{value:" document, we mentioned that we can pre-bake the components used in the page through the overall export method, so as to generate css files for cache hit to improve the next open speed. This is also the way we use in the official website. So the components in the Demo actually reuse this part of the style.",paraId:4,tocIndex:0},{value:"Wait a minute! Isn't CSS-in-JS supposed to generate style hash at runtime and align it with ",paraId:6,tocIndex:0},{value:"<style />",paraId:6,tocIndex:0},{value:"? Why can css files also be aligned? Don't worry, let's take a look.",paraId:6,tocIndex:0},{value:"Application level CSS-in-JS solutions will calculate the hash value of the generated style and store it in the cache. When rerender, it will first check whether the corresponding style exists in the cache. If it exists, it will be used directly, otherwise it will be generated again. This can avoid repeated generation of styles, so as to improve performance.",paraId:7,tocIndex:1},{value:"Every dynamically inserted style is also identified by hash. If the ",paraId:8,tocIndex:1},{value:"<style />",paraId:8,tocIndex:1},{value:" with the hash already exists in the page, it means that inline style injection has been done in SSR. Then ",paraId:8,tocIndex:1},{value:"<style />",paraId:8,tocIndex:1},{value:" does not need to be created again.",paraId:8,tocIndex:1},{value:"You can find that although the ",paraId:9,tocIndex:1},{value:"<style />",paraId:9,tocIndex:1},{value:" node can be omitted, hash still deps on the calculated style content. So even if there is reusable style in the page, it still needs to be calculated once. It's really not cost-effective.",paraId:9,tocIndex:1},{value:"In the ",paraId:10,tocIndex:2},{value:"component-level CSS-in-JS",paraId:11,tocIndex:2},{value:" article, we mentioned that Ant Design's Cache mechanism does not need to calculate the complete style. For the component library, as long as the Token and ComponentName can determine the consistency of the generated style, so we can calculate the hash value in advance:",paraId:10,tocIndex:2},{value:"Therefore, we found that we can reuse this mechanism to realize whether the component style has been injected on the client side.",paraId:12,tocIndex:2},{value:"In ",paraId:13,tocIndex:3},{value:"@ant-design/cssinjs",paraId:13,tocIndex:3},{value:", Cache itself contains the style and hash information corresponding to each element. The previous ",paraId:13,tocIndex:3},{value:"extractStyle",paraId:13,tocIndex:3},{value:" method only takes the content of style in Cache for packaging:",paraId:13,tocIndex:3},{value:'// e.g. Real world path is much more complex\n{\n  "bAMbOo|Button": ["LItTlE", ":where(.bAMbOo).ant-btn { color: red }"],\n  "bAMbOo|Spin": ["liGHt", ":where(.bAMbOo).ant-spin { color: blue }"]\n}\n',paraId:14,tocIndex:3},{value:"Get:",paraId:15,tocIndex:3},{value:":where(.bAMbOo).ant-btn {\n  color: red;\n}\n:where(.bAMbOo).ant-spin {\n  color: blue;\n}\n",paraId:16,tocIndex:3},{value:"We go further to reuse the style. We also extract the path and hash value:",paraId:17,tocIndex:3},{value:'{\n  "bAMbOo|Button": "LItTlE",\n  "bAMbOo|Spin": "liGHt"\n}\n',paraId:18,tocIndex:3},{value:"And also pack into css style:",paraId:19,tocIndex:3},{value:"// Just example. Not real world code\n.cssinjs-cache-path {\n  content: 'bAMbOo|Button:LItTlE;bAMbOo|Spin:liGHt';\n}\n",paraId:20,tocIndex:3},{value:"In this way, the SSR side will retain all the information we need, and then we only need to extract it on the client side.",paraId:21,tocIndex:3},{value:"It's much simpler on the client side. We can extract the HashMap information through ",paraId:22,tocIndex:4},{value:"getComputedStyle",paraId:22,tocIndex:4},{value:":",paraId:22,tocIndex:4},{value:"// Just example. Not real world code\nconst measure = document.createElement('div');\nmeasure.className = 'cssinjs-cache-path';\ndocument.body.appendChild(measure);\n\n// Now let's parse the `content`\nconst { content } = getComputedStyle(measure);\n",paraId:23,tocIndex:4},{value:"In the component rendering stage, ",paraId:24,tocIndex:4},{value:"useStyleRegister",paraId:24,tocIndex:4},{value:" will first check whether the path exists in HashMap before calculating CSS Object. If it exists, it means that the data has been generated through the server. We only need to extract the style from the existing ",paraId:24,tocIndex:4},{value:"<style />",paraId:24,tocIndex:4},{value:":",paraId:24,tocIndex:4},{value:'// e.g. Real world path is much more complex\n{\n  "bAMbOo|Button": ["LItTlE", "READ_FROM_INLINE_STYLE"],\n  "bAMbOo|Spin": ["liGHt", "READ_FROM_INLINE_STYLE"]\n}\n',paraId:25,tocIndex:4},{value:"And for the style provided by CSS file (such as the usage of the official website), it will not be removed like ",paraId:26,tocIndex:4},{value:"<style />",paraId:26,tocIndex:4},{value:", we can directly mark it as from CSS file. Like inline style, they will be skipped in the ",paraId:26,tocIndex:4},{value:"useInsertionEffect",paraId:26,tocIndex:4},{value:" stage.",paraId:26,tocIndex:4},{value:'// e.g. Real world path is much more complex\n{\n  "bAMbOo|Button": ["LItTlE", "__FROM_CSS_FILE__"],\n  "bAMbOo|Spin": ["liGHt", "__FROM_CSS_FILE__"]\n}\n',paraId:27,tocIndex:4},{value:"CSS-in-JS has been criticized for its runtime performance loss. In Ant Design, if your application uses SSR, you can skip the stage of generating styles at runtime on the client side to improve performance. Of course, we will continue to follow up the development of CSS-in-JS to bring you a better experience.",paraId:28,tocIndex:5}];}}]);