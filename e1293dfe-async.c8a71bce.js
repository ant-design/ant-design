(("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd=("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd||[]).push([["e1293dfe"],{e1293dfe:function(a,e,d){"use strict";d.d(e,"__esModule",{value:!0}),d.d(e,"texts",{enumerable:!0,get:function(){return I;}}),d("09e6b1dc");let I=[{value:"Used to input a value within a specified range.",paraId:0,tocIndex:0},{value:"Common props ref\uFF1A",paraId:1,tocIndex:15},{value:"Common props",paraId:2,tocIndex:15},{value:"Property",paraId:3,tocIndex:15},{value:"Description",paraId:3,tocIndex:15},{value:"Type",paraId:3,tocIndex:15},{value:"Default",paraId:3,tocIndex:15},{value:"Version",paraId:3,tocIndex:15},{value:"autoFocus",paraId:3,tocIndex:15},{value:"Whether to get focus when component is mounted",paraId:3,tocIndex:15},{value:"boolean",paraId:3,tocIndex:15},{value:"false",paraId:3,tocIndex:15},{value:"classNames",paraId:3,tocIndex:15},{value:"Semantic structure className",paraId:3,tocIndex:15},{value:"Record<SemanticDOM, string>",paraId:4,tocIndex:15},{value:"-",paraId:3,tocIndex:15},{value:"5.10.0",paraId:3,tocIndex:15},{value:"defaultValue",paraId:3,tocIndex:15},{value:"The default value of the slider. When ",paraId:3,tocIndex:15},{value:"range",paraId:3,tocIndex:15},{value:" is false, use number, otherwise, use [number, number]",paraId:3,tocIndex:15},{value:"number | [number, number]",paraId:3,tocIndex:15},{value:"0 | [0, 0]",paraId:3,tocIndex:15},{value:"disabled",paraId:3,tocIndex:15},{value:"If true, the slider will not be interactive",paraId:3,tocIndex:15},{value:"boolean",paraId:3,tocIndex:15},{value:"false",paraId:3,tocIndex:15},{value:"keyboard",paraId:3,tocIndex:15},{value:"Support using keyboard to move handlers",paraId:3,tocIndex:15},{value:"boolean",paraId:3,tocIndex:15},{value:"true",paraId:3,tocIndex:15},{value:"5.2.0+",paraId:3,tocIndex:15},{value:"dots",paraId:3,tocIndex:15},{value:"Whether the thumb can only be dragged to tick marks",paraId:3,tocIndex:15},{value:"boolean",paraId:3,tocIndex:15},{value:"false",paraId:3,tocIndex:15},{value:"included",paraId:3,tocIndex:15},{value:"Takes effect when ",paraId:3,tocIndex:15},{value:"marks",paraId:3,tocIndex:15},{value:" is not null. True means containment and false means coordinative",paraId:3,tocIndex:15},{value:"boolean",paraId:3,tocIndex:15},{value:"true",paraId:3,tocIndex:15},{value:"marks",paraId:3,tocIndex:15},{value:"Tick marks of Slider. The type of key must be ",paraId:3,tocIndex:15},{value:"number",paraId:3,tocIndex:15},{value:", and must be in closed interval [min, max]. Each mark can declare its own style",paraId:3,tocIndex:15},{value:"object",paraId:3,tocIndex:15},{value:"{ number: ReactNode } | { number: { style: CSSProperties, label: ReactNode } }",paraId:3,tocIndex:15},{value:"max",paraId:3,tocIndex:15},{value:"The maximum value the slider can slide to",paraId:3,tocIndex:15},{value:"number",paraId:3,tocIndex:15},{value:"100",paraId:3,tocIndex:15},{value:"min",paraId:3,tocIndex:15},{value:"The minimum value the slider can slide to",paraId:3,tocIndex:15},{value:"number",paraId:3,tocIndex:15},{value:"0",paraId:3,tocIndex:15},{value:"range",paraId:3,tocIndex:15},{value:"Enable dual thumb mode for range selection",paraId:3,tocIndex:15},{value:"boolean",paraId:3,tocIndex:15},{value:"false",paraId:3,tocIndex:15},{value:"reverse",paraId:3,tocIndex:15},{value:"Reverse the component",paraId:3,tocIndex:15},{value:"boolean",paraId:3,tocIndex:15},{value:"false",paraId:3,tocIndex:15},{value:"step",paraId:3,tocIndex:15},{value:"The granularity the slider can step through values. Must be greater than 0, and be divisible by (max - min). When ",paraId:3,tocIndex:15},{value:"step",paraId:3,tocIndex:15},{value:" is ",paraId:3,tocIndex:15},{value:"null",paraId:3,tocIndex:15},{value:" and ",paraId:3,tocIndex:15},{value:"marks",paraId:3,tocIndex:15},{value:" exist, valid points will only be marks, ",paraId:3,tocIndex:15},{value:"min",paraId:3,tocIndex:15},{value:" and ",paraId:3,tocIndex:15},{value:"max",paraId:3,tocIndex:15},{value:"number | null",paraId:3,tocIndex:15},{value:"1",paraId:3,tocIndex:15},{value:"styles",paraId:3,tocIndex:15},{value:"Semantic structure style",paraId:3,tocIndex:15},{value:"Record<SemanticDOM, React.CSSProperties>",paraId:5,tocIndex:15},{value:"-",paraId:3,tocIndex:15},{value:"5.10.0",paraId:3,tocIndex:15},{value:"tooltip",paraId:3,tocIndex:15},{value:"The tooltip related props",paraId:3,tocIndex:15},{value:"tooltip",paraId:6,tocIndex:15},{value:"-",paraId:3,tocIndex:15},{value:"4.23.0",paraId:3,tocIndex:15},{value:"value",paraId:3,tocIndex:15},{value:"The value of slider. When ",paraId:3,tocIndex:15},{value:"range",paraId:3,tocIndex:15},{value:" is false, use number, otherwise, use [number, number]",paraId:3,tocIndex:15},{value:"number | [number, number]",paraId:3,tocIndex:15},{value:"-",paraId:3,tocIndex:15},{value:"vertical",paraId:3,tocIndex:15},{value:"If true, the slider will be vertical",paraId:3,tocIndex:15},{value:"boolean",paraId:3,tocIndex:15},{value:"false",paraId:3,tocIndex:15},{value:"onChangeComplete",paraId:3,tocIndex:15},{value:"Fire when ",paraId:3,tocIndex:15},{value:"mouseup",paraId:3,tocIndex:15},{value:" or ",paraId:3,tocIndex:15},{value:"keyup",paraId:3,tocIndex:15},{value:" is fired",paraId:3,tocIndex:15},{value:"(value) => void",paraId:3,tocIndex:15},{value:"-",paraId:3,tocIndex:15},{value:"onChange",paraId:3,tocIndex:15},{value:"Callback function that is fired when the user changes the slider's value",paraId:3,tocIndex:15},{value:"(value) => void",paraId:3,tocIndex:15},{value:"-",paraId:3,tocIndex:15},{value:"Property",paraId:7,tocIndex:16},{value:"Description",paraId:7,tocIndex:16},{value:"Type",paraId:7,tocIndex:16},{value:"Default",paraId:7,tocIndex:16},{value:"Version",paraId:7,tocIndex:16},{value:"draggableTrack",paraId:7,tocIndex:16},{value:"Whether range track can be dragged",paraId:7,tocIndex:16},{value:"boolean",paraId:7,tocIndex:16},{value:"false",paraId:7,tocIndex:16},{value:"-",paraId:7,tocIndex:16},{value:"editable",paraId:7,tocIndex:16},{value:"Dynamic edit nodes. Cannot be used with ",paraId:7,tocIndex:16},{value:"draggableTrack",paraId:7,tocIndex:16},{value:"boolean",paraId:7,tocIndex:16},{value:"false",paraId:7,tocIndex:16},{value:"5.20.0",paraId:7,tocIndex:16},{value:"minCount",paraId:7,tocIndex:16},{value:"The minimum count of nodes",paraId:7,tocIndex:16},{value:"number",paraId:7,tocIndex:16},{value:"0",paraId:7,tocIndex:16},{value:"5.20.0",paraId:7,tocIndex:16},{value:"maxCount",paraId:7,tocIndex:16},{value:"The maximum count of nodes",paraId:7,tocIndex:16},{value:"number",paraId:7,tocIndex:16},{value:"-",paraId:7,tocIndex:16},{value:"5.20.0",paraId:7,tocIndex:16},{value:"Property",paraId:8,tocIndex:17},{value:"Description",paraId:8,tocIndex:17},{value:"Type",paraId:8,tocIndex:17},{value:"Default",paraId:8,tocIndex:17},{value:"Version",paraId:8,tocIndex:17},{value:"autoAdjustOverflow",paraId:8,tocIndex:17},{value:"Whether to automatically adjust the popup position",paraId:8,tocIndex:17},{value:"boolean",paraId:8,tocIndex:17},{value:"true",paraId:8,tocIndex:17},{value:"5.8.0",paraId:8,tocIndex:17},{value:"open",paraId:8,tocIndex:17},{value:"If true, Tooltip will always be visible; if false, it will never be visible, even when dragging or hovering",paraId:8,tocIndex:17},{value:"boolean",paraId:8,tocIndex:17},{value:"-",paraId:8,tocIndex:17},{value:"4.23.0",paraId:8,tocIndex:17},{value:"placement",paraId:8,tocIndex:17},{value:"Set Tooltip display position. Ref ",paraId:8,tocIndex:17},{value:"Tooltip",paraId:9,tocIndex:17},{value:"string",paraId:8,tocIndex:17},{value:"-",paraId:8,tocIndex:17},{value:"4.23.0",paraId:8,tocIndex:17},{value:"getPopupContainer",paraId:8,tocIndex:17},{value:"The DOM container of the Tooltip. The default behavior is to create a div element in the body",paraId:8,tocIndex:17},{value:"(triggerNode) => HTMLElement",paraId:8,tocIndex:17},{value:"() => document.body",paraId:8,tocIndex:17},{value:"4.23.0",paraId:8,tocIndex:17},{value:"formatter",paraId:8,tocIndex:17},{value:"Slider will pass its value to ",paraId:8,tocIndex:17},{value:"formatter",paraId:8,tocIndex:17},{value:", display its value in Tooltip, and hide the Tooltip when the returned value is null",paraId:8,tocIndex:17},{value:"value => ReactNode | null",paraId:8,tocIndex:17},{value:"IDENTITY",paraId:8,tocIndex:17},{value:"4.23.0",paraId:8,tocIndex:17},{value:"Name",paraId:10,tocIndex:18},{value:"Description",paraId:10,tocIndex:18},{value:"Version",paraId:10,tocIndex:18},{value:"blur()",paraId:10,tocIndex:18},{value:"Remove focus",paraId:10,tocIndex:18},{value:"focus()",paraId:10,tocIndex:18},{value:"Get focus",paraId:10,tocIndex:18}];}}]);