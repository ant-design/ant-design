(("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd=("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd||[]).push([["a7515772"],{a7515772:function(a,e,d){"use strict";d.d(e,"__esModule",{value:!0}),d.d(e,"texts",{enumerable:!0,get:function(){return t;}}),d("3c26670a");let t=[{value:"A user input in a form field is needed.",paraId:0,tocIndex:0},{value:"A search input is required.",paraId:0,tocIndex:0},{value:"Common props ref\uFF1A",paraId:1,tocIndex:27},{value:"Common props",paraId:2,tocIndex:27},{value:"Property",paraId:3,tocIndex:28},{value:"Description",paraId:3,tocIndex:28},{value:"Type",paraId:3,tocIndex:28},{value:"Default",paraId:3,tocIndex:28},{value:"Version",paraId:3,tocIndex:28},{value:"addonAfter",paraId:3,tocIndex:28},{value:"The label text displayed after (on the right side of) the input field, please use ",paraId:3,tocIndex:28},{value:"Space.Compact",paraId:3,tocIndex:28},{value:" instead",paraId:3,tocIndex:28},{value:"ReactNode",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"addonBefore",paraId:3,tocIndex:28},{value:"The label text displayed before (on the left side of) the input field, please use ",paraId:3,tocIndex:28},{value:"Space.Compact",paraId:3,tocIndex:28},{value:" instead",paraId:3,tocIndex:28},{value:"ReactNode",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"allowClear",paraId:3,tocIndex:28},{value:"If allow to remove input content with clear icon",paraId:3,tocIndex:28},{value:"boolean | { clearIcon: ReactNode }",paraId:3,tocIndex:28},{value:"false",paraId:3,tocIndex:28},{value:"bordered",paraId:3,tocIndex:28},{value:"Whether has border style, please use ",paraId:3,tocIndex:28},{value:"variant",paraId:3,tocIndex:28},{value:" instead",paraId:3,tocIndex:28},{value:"boolean",paraId:3,tocIndex:28},{value:"true",paraId:3,tocIndex:28},{value:"4.5.0",paraId:3,tocIndex:28},{value:"classNames",paraId:3,tocIndex:28},{value:"Semantic DOM class",paraId:3,tocIndex:28},{value:"Record<",paraId:3,tocIndex:28},{value:"SemanticDOM",paraId:4,tocIndex:28},{value:", string>",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"5.4.0",paraId:3,tocIndex:28},{value:"count",paraId:3,tocIndex:28},{value:"Character count config",paraId:3,tocIndex:28},{value:"CountConfig",paraId:5,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"5.10.0",paraId:3,tocIndex:28},{value:"defaultValue",paraId:3,tocIndex:28},{value:"The initial input content",paraId:3,tocIndex:28},{value:"string",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"disabled",paraId:3,tocIndex:28},{value:"Whether the input is disabled",paraId:3,tocIndex:28},{value:"boolean",paraId:3,tocIndex:28},{value:"false",paraId:3,tocIndex:28},{value:"id",paraId:3,tocIndex:28},{value:"The ID for input",paraId:3,tocIndex:28},{value:"string",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"maxLength",paraId:3,tocIndex:28},{value:"The maximum number of characters in Input",paraId:3,tocIndex:28},{value:"number",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"prefix",paraId:3,tocIndex:28},{value:"The prefix icon for the Input",paraId:3,tocIndex:28},{value:"ReactNode",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"showCount",paraId:3,tocIndex:28},{value:"Whether to show character count",paraId:3,tocIndex:28},{value:"boolean | { formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode }",paraId:3,tocIndex:28},{value:"false",paraId:3,tocIndex:28},{value:"4.18.0 info.value: 4.23.0",paraId:3,tocIndex:28},{value:"status",paraId:3,tocIndex:28},{value:"Set validation status",paraId:3,tocIndex:28},{value:"'error' | 'warning'",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"4.19.0",paraId:3,tocIndex:28},{value:"styles",paraId:3,tocIndex:28},{value:"Semantic DOM style",paraId:3,tocIndex:28},{value:"Record<",paraId:3,tocIndex:28},{value:"SemanticDOM",paraId:6,tocIndex:28},{value:", CSSProperties>",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"5.4.0",paraId:3,tocIndex:28},{value:"size",paraId:3,tocIndex:28},{value:"The size of the input box. Note: in the context of a form, the ",paraId:3,tocIndex:28},{value:"middle",paraId:3,tocIndex:28},{value:" size is used",paraId:3,tocIndex:28},{value:"large",paraId:3,tocIndex:28},{value:" | ",paraId:3,tocIndex:28},{value:"middle",paraId:3,tocIndex:28},{value:" | ",paraId:3,tocIndex:28},{value:"small",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"suffix",paraId:3,tocIndex:28},{value:"The suffix icon for the Input",paraId:3,tocIndex:28},{value:"ReactNode",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"type",paraId:3,tocIndex:28},{value:"The type of input, see: ",paraId:3,tocIndex:28},{value:"MDN",paraId:3,tocIndex:28},{value:"( use ",paraId:3,tocIndex:28},{value:"Input.TextArea",paraId:3,tocIndex:28},{value:" instead of ",paraId:3,tocIndex:28},{value:'type="textarea"',paraId:3,tocIndex:28},{value:")",paraId:3,tocIndex:28},{value:"string",paraId:3,tocIndex:28},{value:"text",paraId:3,tocIndex:28},{value:"value",paraId:3,tocIndex:28},{value:"The input content value",paraId:3,tocIndex:28},{value:"string",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"variant",paraId:3,tocIndex:28},{value:"Variants of Input",paraId:3,tocIndex:28},{value:"outlined",paraId:3,tocIndex:28},{value:" | ",paraId:3,tocIndex:28},{value:"borderless",paraId:3,tocIndex:28},{value:" | ",paraId:3,tocIndex:28},{value:"filled",paraId:3,tocIndex:28},{value:" | ",paraId:3,tocIndex:28},{value:"underlined",paraId:3,tocIndex:28},{value:"outlined",paraId:3,tocIndex:28},{value:"5.13.0 | ",paraId:3,tocIndex:28},{value:"underlined",paraId:3,tocIndex:28},{value:": 5.24.0",paraId:3,tocIndex:28},{value:"onChange",paraId:3,tocIndex:28},{value:"Callback when user input",paraId:3,tocIndex:28},{value:"function(e)",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"onPressEnter",paraId:3,tocIndex:28},{value:"The callback function that is triggered when Enter key is pressed",paraId:3,tocIndex:28},{value:"function(e)",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"onClear",paraId:3,tocIndex:28},{value:"Callback when click the clear button",paraId:3,tocIndex:28},{value:"() => void",paraId:3,tocIndex:28},{value:"-",paraId:3,tocIndex:28},{value:"5.20.0",paraId:3,tocIndex:28},{value:"When ",paraId:7,tocIndex:28},{value:"Input",paraId:7,tocIndex:28},{value:" is used in a ",paraId:7,tocIndex:28},{value:"Form.Item",paraId:7,tocIndex:28},{value:" context, if the ",paraId:7,tocIndex:28},{value:"Form.Item",paraId:7,tocIndex:28},{value:" has the ",paraId:7,tocIndex:28},{value:"id",paraId:7,tocIndex:28},{value:" props defined then ",paraId:7,tocIndex:28},{value:"value",paraId:7,tocIndex:28},{value:", ",paraId:7,tocIndex:28},{value:"defaultValue",paraId:7,tocIndex:28},{value:", and ",paraId:7,tocIndex:28},{value:"id",paraId:7,tocIndex:28},{value:" props of ",paraId:7,tocIndex:28},{value:"Input",paraId:7,tocIndex:28},{value:" are automatically set.",paraId:7,tocIndex:28},{value:"The rest of the props of Input are exactly the same as the original ",paraId:8,tocIndex:28},{value:"input",paraId:8,tocIndex:28},{value:".",paraId:8,tocIndex:28},{value:"interface CountConfig {\n  // Max character count. Different from the native `maxLength`, it will be marked warning but not truncated\n  max?: number;\n  // Custom character count, for example, the standard emoji length is greater than 1, you can customize the counting strategy to change it to 1\n  strategy?: (value: string) => number;\n  // Same as `showCount`\n  show?: boolean | ((args: { value: string; count: number; maxLength?: number }) => ReactNode);\n  // Custom clipping logic when the number of characters exceeds `count.max`, no clipping when not configured\n  exceedFormatter?: (value: string, config: { max: number }) => string;\n}\n",paraId:9,tocIndex:29},{value:"Same as Input, and more:",paraId:10,tocIndex:30},{value:"Property",paraId:11,tocIndex:30},{value:"Description",paraId:11,tocIndex:30},{value:"Type",paraId:11,tocIndex:30},{value:"Default",paraId:11,tocIndex:30},{value:"Version",paraId:11,tocIndex:30},{value:"autoSize",paraId:11,tocIndex:30},{value:"Height auto size feature, can be set to true | false or an object { minRows: 2, maxRows: 6 }",paraId:11,tocIndex:30},{value:"boolean | object",paraId:11,tocIndex:30},{value:"false",paraId:11,tocIndex:30},{value:"classNames",paraId:11,tocIndex:30},{value:"Semantic DOM class",paraId:11,tocIndex:30},{value:"Record<",paraId:11,tocIndex:30},{value:"SemanticDOM",paraId:12,tocIndex:30},{value:", string>",paraId:11,tocIndex:30},{value:"-",paraId:11,tocIndex:30},{value:"5.4.0",paraId:11,tocIndex:30},{value:"styles",paraId:11,tocIndex:30},{value:"Semantic DOM style",paraId:11,tocIndex:30},{value:"Record<",paraId:11,tocIndex:30},{value:"SemanticDOM",paraId:13,tocIndex:30},{value:", CSSProperties>",paraId:11,tocIndex:30},{value:"-",paraId:11,tocIndex:30},{value:"5.4.0",paraId:11,tocIndex:30},{value:"The rest of the props of ",paraId:14,tocIndex:30},{value:"Input.TextArea",paraId:14,tocIndex:30},{value:" are the same as the original ",paraId:14,tocIndex:30},{value:"textarea",paraId:14,tocIndex:30},{value:".",paraId:14,tocIndex:30},{value:"Property",paraId:15,tocIndex:31},{value:"Description",paraId:15,tocIndex:31},{value:"Type",paraId:15,tocIndex:31},{value:"Default",paraId:15,tocIndex:31},{value:"enterButton",paraId:15,tocIndex:31},{value:"false displays the default button color, true uses the primary color, or you can provide a custom button. Conflicts with addonAfter.",paraId:15,tocIndex:31},{value:"ReactNode",paraId:15,tocIndex:31},{value:"false",paraId:15,tocIndex:31},{value:"loading",paraId:15,tocIndex:31},{value:"Search box with loading",paraId:15,tocIndex:31},{value:"boolean",paraId:15,tocIndex:31},{value:"false",paraId:15,tocIndex:31},{value:"onSearch",paraId:15,tocIndex:31},{value:"The callback function triggered when you click on the search-icon, the clear-icon or press the Enter key",paraId:15,tocIndex:31},{value:'function(value, event, { source: "input" | "clear" })',paraId:15,tocIndex:31},{value:"-",paraId:15,tocIndex:31},{value:"Supports all props of ",paraId:16,tocIndex:31},{value:"Input",paraId:16,tocIndex:31},{value:".",paraId:16,tocIndex:31},{value:"Property",paraId:17,tocIndex:32},{value:"Description",paraId:17,tocIndex:32},{value:"Type",paraId:17,tocIndex:32},{value:"Default",paraId:17,tocIndex:32},{value:"Version",paraId:17,tocIndex:32},{value:"iconRender",paraId:17,tocIndex:32},{value:"Custom toggle button",paraId:17,tocIndex:32},{value:"(visible) => ReactNode",paraId:17,tocIndex:32},{value:"(visible) => (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)",paraId:17,tocIndex:32},{value:"4.3.0",paraId:17,tocIndex:32},{value:"visibilityToggle",paraId:17,tocIndex:32},{value:"Whether show toggle button or control password visible",paraId:17,tocIndex:32},{value:"boolean | ",paraId:17,tocIndex:32},{value:"VisibilityToggle",paraId:18,tocIndex:32},{value:"true",paraId:17,tocIndex:32},{value:"Added in ",paraId:19,tocIndex:33},{value:"5.16.0",paraId:19,tocIndex:33},{value:".",paraId:19,tocIndex:33},{value:"Notes for developers",paraId:20,tocIndex:33},{value:"When the ",paraId:21,tocIndex:33},{value:"mask",paraId:21,tocIndex:33},{value:" prop is string, we recommend receiving a single character or a single emoji. If multiple characters or multiple emoji are passed, a warning will be thrown.",paraId:21,tocIndex:33},{value:"Property",paraId:22,tocIndex:33},{value:"Description",paraId:22,tocIndex:33},{value:"Type",paraId:22,tocIndex:33},{value:"Default",paraId:22,tocIndex:33},{value:"Version",paraId:22,tocIndex:33},{value:"defaultValue",paraId:22,tocIndex:33},{value:"Default value",paraId:22,tocIndex:33},{value:"string",paraId:22,tocIndex:33},{value:"-",paraId:22,tocIndex:33},{value:"disabled",paraId:22,tocIndex:33},{value:"Whether the input is disabled",paraId:22,tocIndex:33},{value:"boolean",paraId:22,tocIndex:33},{value:"false",paraId:22,tocIndex:33},{value:"formatter",paraId:22,tocIndex:33},{value:"Format display, blank fields will be filled with ",paraId:22,tocIndex:33},{value:" ",paraId:22,tocIndex:33},{value:"(value: string) => string",paraId:22,tocIndex:33},{value:"-",paraId:22,tocIndex:33},{value:"separator",paraId:22,tocIndex:33},{value:"render the separator after the input box of the specified index",paraId:22,tocIndex:33},{value:"ReactNode |((i: number) => ReactNode)",paraId:22,tocIndex:33},{value:"-",paraId:22,tocIndex:33},{value:"5.24.0",paraId:22,tocIndex:33},{value:"mask",paraId:22,tocIndex:33},{value:"Custom display, the original value will not be modified",paraId:22,tocIndex:33},{value:"boolean | string",paraId:22,tocIndex:33},{value:"false",paraId:22,tocIndex:33},{value:"5.17.0",paraId:22,tocIndex:33},{value:"length",paraId:22,tocIndex:33},{value:"The number of input elements",paraId:22,tocIndex:33},{value:"number",paraId:22,tocIndex:33},{value:"6",paraId:22,tocIndex:33},{value:"status",paraId:22,tocIndex:33},{value:"Set validation status",paraId:22,tocIndex:33},{value:"'error' | 'warning'",paraId:22,tocIndex:33},{value:"-",paraId:22,tocIndex:33},{value:"size",paraId:22,tocIndex:33},{value:"The size of the input box",paraId:22,tocIndex:33},{value:"small",paraId:22,tocIndex:33},{value:" | ",paraId:22,tocIndex:33},{value:"middle",paraId:22,tocIndex:33},{value:" | ",paraId:22,tocIndex:33},{value:"large",paraId:22,tocIndex:33},{value:"middle",paraId:22,tocIndex:33},{value:"variant",paraId:22,tocIndex:33},{value:"Variants of Input",paraId:22,tocIndex:33},{value:"outlined",paraId:22,tocIndex:33},{value:" | ",paraId:22,tocIndex:33},{value:"borderless",paraId:22,tocIndex:33},{value:" | ",paraId:22,tocIndex:33},{value:"filled",paraId:22,tocIndex:33},{value:" | ",paraId:22,tocIndex:33},{value:"underlined",paraId:22,tocIndex:33},{value:"outlined",paraId:22,tocIndex:33},{value:"underlined",paraId:22,tocIndex:33},{value:": 5.24.0",paraId:22,tocIndex:33},{value:"value",paraId:22,tocIndex:33},{value:"The input content value",paraId:22,tocIndex:33},{value:"string",paraId:22,tocIndex:33},{value:"-",paraId:22,tocIndex:33},{value:"onChange",paraId:22,tocIndex:33},{value:"Trigger when all the fields are filled",paraId:22,tocIndex:33},{value:"(value: string) => void",paraId:22,tocIndex:33},{value:"-",paraId:22,tocIndex:33},{value:"onInput",paraId:22,tocIndex:33},{value:"Trigger when the input value changes",paraId:22,tocIndex:33},{value:"(value: string[]) => void",paraId:22,tocIndex:33},{value:"-",paraId:22,tocIndex:33},{value:"5.22.0",paraId:22,tocIndex:33},{value:"Property",paraId:23,tocIndex:34},{value:"Description",paraId:23,tocIndex:34},{value:"Type",paraId:23,tocIndex:34},{value:"Default",paraId:23,tocIndex:34},{value:"Version",paraId:23,tocIndex:34},{value:"visible",paraId:23,tocIndex:34},{value:"Whether the password is show or hide",paraId:23,tocIndex:34},{value:"boolean",paraId:23,tocIndex:34},{value:"false",paraId:23,tocIndex:34},{value:"4.24.0",paraId:23,tocIndex:34},{value:"onVisibleChange",paraId:23,tocIndex:34},{value:"Callback executed when visibility of the password is changed",paraId:23,tocIndex:34},{value:"(visible) => void",paraId:23,tocIndex:34},{value:"-",paraId:23,tocIndex:34},{value:"4.24.0",paraId:23,tocIndex:34},{value:"Name",paraId:24,tocIndex:35},{value:"Description",paraId:24,tocIndex:35},{value:"Parameters",paraId:24,tocIndex:35},{value:"Version",paraId:24,tocIndex:35},{value:"blur",paraId:24,tocIndex:35},{value:"Remove focus",paraId:24,tocIndex:35},{value:"-",paraId:24,tocIndex:35},{value:"focus",paraId:24,tocIndex:35},{value:"Get focus",paraId:24,tocIndex:35},{value:"(option?: { preventScroll?: boolean, cursor?: 'start' | 'end' | 'all' })",paraId:24,tocIndex:35},{value:"option - 4.10.0",paraId:24,tocIndex:35},{value:"prefix/suffix/showCount",paraId:25},{value:"When Input dynamic add or remove ",paraId:26,tocIndex:41},{value:"prefix/suffix/showCount",paraId:26,tocIndex:41},{value:" will make React recreate the dom structure and new input will be not focused. You can set an empty ",paraId:26,tocIndex:41},{value:"<span />",paraId:26,tocIndex:41},{value:" element to keep the dom structure:",paraId:26,tocIndex:41},{value:'const suffix = condition ? <Icon type="smile" /> : <span />;\n\n<Input suffix={suffix} />;\n',paraId:27,tocIndex:41},{value:"value",paraId:25},{value:"maxLength",paraId:25},{value:"When in control, component should show as what it set to avoid submit value not align with store value in Form.",paraId:28,tocIndex:42}];}}]);