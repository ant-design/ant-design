---
description: 
globs: 
alwaysApply: false
---
# 组件规范

## 文件组织

组件目录应包含以下文件：
- `index.tsx`: 组件导出文件
- `ComponentName.tsx`: 主要组件实现文件
- `index.en-US.md` 和 `index.zh-CN.md`: 中英文文档
- `style/`: 组件样式目录
- `demo/`: 组件示例代码目录
- `__tests__/`: 测试文件目录

## 代码组织

- 主要组件文件应该遵循一致的结构：
  - 类型定义
  - 常量
  - 辅助函数
  - 主组件定义
  - 组件元数据

## 组件设计

- 支持受控和非受控模式
- 提供良好的默认值
- 使用 React Context 共享内部状态（适用于复杂组件）
- 组件属性应遵循一致的命名风格
- 函数属性名以 `on` 开头，如 `onChange`、`onClick`
- 状态属性名要明确，如 `open` 而不是 `visible`

## 可访问性

- 提供适当的 ARIA 属性
- 支持键盘导航
- 确保色彩对比度符合 WCAG 标准
- 支持屏幕阅读器

## 性能考虑

- 使用 `React.memo` 避免不必要的重渲染
- 使用 `useCallback` 和 `useMemo` 优化性能
- 避免在渲染过程中创建新函数或对象

## Token 设计

- 使用 CSS-in-JS (@ant-design/cssinjs) 管理样式
- 使用设计 Token 而非硬编码的样式值
- 遵循 Ant Design 的主题变量命名规范

## 支持服务端渲染

- 所有组件必须支持服务端渲染
- 避免在组件初始化阶段直接访问 `window`、`document` 等浏览器对象
- 使用 `useEffect` 来处理只在客户端执行的代码
- 检测环境：`typeof window !== 'undefined'`
- 使用 `@ant-design/cssinjs` 提供的 SSR 支持